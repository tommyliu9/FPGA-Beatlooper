module toplevelweek1(SW, KEY, 
CLOCK_50, HEX0, LEDR, PS2_DAT, 
PS2_CLK, CLOCK2_50, KEY, FPGA_I2C_SCLK, FPGA_I2C_SDAT, AUD_XCK, 
		        AUD_DACLRCK, AUD_ADCLRCK, AUD_BCLK, AUD_ADCDAT, 
				AUD_DACDAT,
 HEX4, HEX3, HEX2, HEX5);
	//AUDIO 
	input				AUD_ADCDAT;

	// Bidirectionals
	inout				AUD_BCLK;
	inout				AUD_ADCLRCK;
	inout				AUD_DACLRCK;

	inout				I2C_SDAT;

	// Outputs
	output				AUD_XCK;
	output				AUD_DACDAT;

	output				I2C_SCLK;
	input 			CLOCK_27;
	input [9:0] SW;
	// PS_2 PORTS
	input PS2_DAT;
	input PS2_CLK;
	input CLOCK_50;
	//DE1 OUTPUTS
	input [3:0] KEY;
	
	output [6:0] HEX5;
	output [6:0] HEX3;
	output [6:0] HEX2;
	output [6:0] HEX0;
	output [9:0] LEDR;
	output [6:0] HEX4;
	
	wire [63:0] notes;

	reg [32:0] rateSelect;
	wire rateClock;
	reg [6:0] counter;
	
	// Increments the counter every clock cycle
	always @(posedge rateClock) begin
		if (!KEY[0]) begin
			counter <= 0;
		end
		else begin
			if (counter != 127)
				counter <= counter + 1;
			else
				counter <= 7'b0;
		end
	end
	
	sevsegdisplay hex1({1'b0,counter[6:4]+1}, HEX0);
	
	always @(posedge CLOCK_50) begin
		if (!KEY[0])
			rateSelect <= 1687500;
		if (!KEY[2] && rateSelect >= 687500)
			rateSelect <= rateSelect - 1;
		if (!KEY[3] & rateSelect <= 4687500)
			rateSelect <= rateSelect + 1;
	end

	looperModule looper(
		.clk(rateClock),
		.reset(KEY[0]),
		.dataIn(KEY[1]),
		.trackChooser(SW[7:0]),
		.trackCount(counter),
		.notesOut(notes)
		);
		
	rateDivider rate(
		.speed(rateSelect),
		.reset(KEY[0]),
		.clock(CLOCK_50),
		.out(rateClock)
	);
	
	genvar c;
		generate        
			for (c = 0; c < 8 ; c = c + 1) begin: noteAssigner
				assign LEDR[c] = (notes[((c+1)*8)-1:c*8] != 0) ? 1'b1 : 1'b0;  
			end
		endgenerate
		
	wire [9:0] freq;
	
	key key_to_freq(CLOCK_50, PS2_DAT, PS2_CLK, freq);
	audio_out aout(CLOCK_50, CLOCK2_50, KEY[0], FPGA_I2C_SCLK, FPGA_I2C_SDAT, AUD_XCK, 
		        AUD_DACLRCK, AUD_ADCLRCK, AUD_BCLK, AUD_ADCDAT, AUD_DACDAT, freq);
				
	sevsegdisplay hex4({2'b0,freq[9:8]},HEX4);
	sevsegdisplay hex3(freq[7:4], HEX3);
	sevsegdisplay hex2(freq[3:0], HEX2);
endmodule 

module rateDivider(speed, reset, clock, out);

	input clock, reset;
	input [32:0] speed;
	output reg out;
	
	reg [32:0] counter;
	reg [32:0] load_val;
	
	always @(posedge clock)
	begin
		load_val <= speed;
			
		if (reset == 1'b0)
			begin
				out <= 0;
				counter <= 0;
			end
		else
			begin
				if (counter == 0)
					begin
						counter <= load_val;
						out <= 1'b1;
					end
				else
					begin
						counter <= counter - 1'b1;
						out <= 1'b0;
					end
			end
	end
	
endmodule

module sevsegdisplay(c, seg);
	input [3:0] c;
	output [6:0] seg;
	
	assign seg[0] = (~c[3] & ~c[2] & ~c[1] & c[0]) | (~c[3] & c[2] & ~c[1] & ~c[0]) | (c[3] & c[2] & ~c[1] & c[0]) | (c[3] & ~c[2] & c[1] & c[0]);
	assign seg[1] = (~c[3] & c[2] & ~c[1] & c[0]) | (c[3] & c[2] & ~c[0]) | (c[3] & c[1] & c[0]) | (c[2] & c[1] & ~c[0]);
	assign seg[2] = (~c[3] & ~c[2] & c[1] & ~c[0]) | (c[3] & c[2] & ~c[0]) | (c[3] & c[2] & c[1]);
	assign seg[3] = (~c[3] & ~c[2] & ~c[1] & c[0]) | (~c[3] & c[2] & ~c[1] & ~c[0]) | (c[3] & ~c[2] & c[1] & ~c[0]) | (c[2] & c[1] & c[0]);
	assign seg[4] = (~c[3] & c[0]) | (~c[3] & c[2] & ~c[1]) | (~c[2] & ~c[1] & c[0]);
	assign seg[5] = (c[3] & c[2] & ~c[1] & c[0]) | (~c[3] & ~c[2] & c[0]) | (~c[3] & c[1] & c[0]) | (~c[3] & ~c[2] & c[1]);
	assign seg[6] = (~c[3] & c[2] & c[1] & c[0]) | (c[3] & c[2] & ~c[1] & ~c[0]) | (~c[3] & ~c[2] & ~c[1]);

endmodule
